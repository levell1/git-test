
# 이렇게 #를 사용해서 주석
.gitignore 깃에 포함하지 않을 자료들

# 모든 file.c
file.c

# 최상위 폴더의 file.c
/file.c

# 모든 .c 확장자 파일
*.c

# .c 확장자지만 무시하지 않을 파일
!not_ignore_this.c

# logs란 이름의 파일 또는 폴더와 그 내용들
logs

# logs란 이름의 폴더와 그 내용들
logs/

# logs 폴더 바로 안의 debug.log와 .c 파일들
logs/debug.log
logs/*.c

# logs 폴더 바로 안, 또는 그 안의 다른 폴더(들) 안의 debug.log
logs/**/debug.log



아래 명령어로 commit 이후
Vi 입력 모드로 진입 - Vim 강좌
작업	Vi 명령어	상세

입력 시작	i	명령어 입력 모드에서 텍스트 입력 모드로 전환
입력 종료	ESC	텍스트 입력 모드에서 명령어 입력 모드로 전환
저장 없이 종료	:q	
저장 없이 강제 종료	:q!	입력한 것이 있을 때 사용
저장하고 종료	:wq	입력한 것이 있을 때 사용
위로 스크롤	k	git log등에서 내역이 길 때 사용
아래로 스크롤	j	git log등에서 내역이 길 때 사용
FIRST COMMIT 입력한 뒤 저장하고 종료

git log
확인 

git diff
k 위로스크롤 j 아래로 스크롤 :q 끄기


git commit -am "메세지"
새로추가된 파일이 없을때 add, commit 을 동시에

Git에서 과거로 돌아가는 두 방식
reset : 원하는 시점으로 돌아간 뒤 이후 내역들을 지웁니다.
revert : 되돌리기 원하는 시점의 커밋을 거꾸로 실행합니다.

아래 명령어로 커밋 내역 확인
git log 로 커밋 내역 확인 해시확인

git reset --hard (돌아갈 커밋 해시)

백업 
.git 폴더 복사 
git reset --hard 가장최근의 commit한 상태로 돌아감

커밋해버리지 않고 revert하기
git revert --no-commit (되돌릴  커밋 해시)
원하는 다른 작업을 추가한 다음 함께 커밋
취소하려면 git reset --hard

브런치 생성
git branch (이름)
깃 브런츠 이동
git switch (add-coach)

깃 브렌치 생성,이동
git switch -c (new-teams)

깃로그 브렌치 다 확인
git log --all --decorate --oneline --graph

서로 다른 브랜치를 합치는 두 방식
merge : 두 브랜치를 한 커밋에 이어붙입니다.
브랜치 사용내역을 남길 필요가 있을 때 적합한 방식입니다.
다른 형태의 merge에 대해서도 이후 다루게 될 것입니다.

master 로 이동후
git merge add-coach
git branch -d add-coach
add-coach 삭제  git branch -d add-coach

rebase : 브랜치를 다른 브랜치에 이어붙입니다.
한 줄로 깔끔히 정리된 내역을 유지하기 원할 때 적합합니다.
이미 팀원과 공유된 커밋들에 대해서는 사용하지 않는 것이 좋습니다.

new-teams 브랜치로 이동
git rebase main
master로 이동
git merge new-teams
new-teams 삭제  git branch -d new-teams

merge 충돌 해결하기

git merge --abort